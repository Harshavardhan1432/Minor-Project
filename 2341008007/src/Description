Description:This Java program simulates a membership database system for a club. It comprises three classes: `Member`, `Date`, and `Main`, each serving specific purposes.Member Class:- The `Member` class represents individual members of the club and encapsulates their information.- It includes attributes such as `MemberID`, `LastName`, `FirstName`, `Handicap`, `Gender`, `Team`, `MemberType`, `Coach`, `Phone`, and `JoinDate`.- A constructor is provided to initialize member objects with the required information.- Getter methods are implemented to retrieve member attributes.- The `display` method formats and prints the details of each member.Date Class:- The `Date` class encapsulates date-related functionalities to handle dates effectively.- It includes attributes for `day`, `month`, and `year` to represent a date.- A constructor initializes date objects with specific values.- Getter methods are provided to access individual components of the date (day, month, and year).- The `isBefore` method compares two dates to determine if one date comes before another.Main Class:- The `Main` class contains the `main` method, serving as the entry point for the program.- It initializes an array of `Member` objects with sample data, demonstrating the functionality of the membership database.- Functionalities demonstrated include displaying all members, retrieving members who joined before a specified date, filtering senior members with a handicap less than 12, and identifying female senior members in Team B.Functionality:1. Display All Members: The program displays all members along with their details stored in the database.2. Retrieve Members Joined Before a Specific Date: It retrieves members who joined the club before a specified date, demonstrating date comparison functionality.3. Filter Senior Members with Handicap Less Than 12: The program filters and displays senior members with a handicap score less than 12.4. Identify Female Senior Members in Team B: It identifies and displays female senior members who are part of Team B, showcasing filtering based on multiple criteria.Conclusion:This program showcases the functionality of a membership database system for a club, including member retrieval and filtering based on various criteria. It demonstrates object-oriented programming principles such as encapsulation, constructor initialization, and method invocation.